git commit --file=<file>  # take commit message from given file
git add --patch  # just as `git add --interactive` and then choose "patch"; have control over whether to add each hunk
git add --interactive
git add --update
git commit --patch  # just like `git add --patch` and then `git commit`, or `git commit --interactive` and then choose "patch"; if aborted, `git add --patch` is aborted
git commit --interactive
git commit -C <commit>|--reuse-message=<commit>
git commit -c <commit>|--reedit-message=<commit>
git commit --dry-run  # do not actually commit, just show some information 
git commit --short  # implies --dry-run, in a short format
git commit --long   # implies --dry-run, in a long format
git commit -t <file>|--template=<file>  # use a template file for commit, e.g. commit.template
git commit --cleanup=<mode> # <mode> could be strip, whitespace, default, etc.
git commit -v|--verbose
git commit --status # defaults to on, but can be used to override configuration variable commit.status
git config --local commit.status off
git config --locat commit.verbose true
git status --short
git status --long
git status --verbose
git add --dry-run
git log --grep=<pattern>
git log --grep=<pattern1> --grep=<pattern2> ... # show log messages which match any of the patterns
git log --all-match --grep=<pattern1> --grep=<pattern2> ... # show log messages which match all of the patterns
git log --grep=<pattern> --invert-grep
git log --one-line  
git log --grep=<pattern> --regexp-ignore-case
git log --grep=<pattern> --basic-regexp # default
git log --grep=<pattern> --extended-regexp 
git log --grep=<pattern> --perl-regexp
git config --local grep.linenumber=true
git config --local grep.extendedRegexp=true
git config --get <key>
git config color.grep.match cyan
git config color.grep.filename green
git config color.grep.lineNumber red
git config color.branch.current cyan
git remote show origin	# show detailed info about origin
git clean -f [--] [path]
git clean -d -f [--] [path]
git clean -n|--dry-run
git clean -i|--interactive
git config clean.requireFalse false
git clean
git clean -x  # remove not only untracked files, but ignored files
git clean -nx
git clean -X  # remove ignored files
git clean -nX
git archive --format=zip --output <foo.zip> HEAD
git archive --list
git archive --format=tar --output <foo.tar> --verbose HEAD
git shortlog
git archive --format=zip --output <foo.zip> --prefix=<prefix> HEAD  # add a prefix to every file and directory inside the archive
git citool  # use gui for commit
git whatchanged # similar to git log, but show raw diff
git config gui.displayUntracted false
git commit --signoff
git branch --set-upstream-to=origin/master
git pull origin master
git push origin master
git add -u|--update	# stage modified and deleted files (but not new files)
git add -A|--all	# stage modified, deleted and new files
git push origin --delete <branch>
git remote rename <old-name> <new-name>
git --man-path
git branch --set-upstream-to=origin/foo foo	# assume current branch is master
git branch --set-upstream-to=<upstream> | -u <upstream>	[<branch-name>]	
git status --ignored
git status --show-stash
git --no-pager
git --no-pager log
git diff -- .gitignore		    # when .gitignore is staged, and is modified after being staged, these diffs show different outputs
git diff --staged -- .gitignore	    # when .gitignore is staged, and is modified after being staged, these diffs show different outputs
git diff HEAD -- .gitignore	    # when .gitignore is staged, and is modified after being staged, these diffs show different outputs
git log --since='10 days ago'
git log --until='10 days ago'
git log -10	# show ten logs
git log --merges
git log --remotes
git log --reverse
git log --relative-date
git diff origin/master HEAD
git diff HEAD origin/master 
git pull --rebase
git flow init
git flow feature start <branch-name>
git flow bugfix start <branch-name>
git flow hotfix start <branch-name>
git flow release start <branch-name>
git flow support start <branch-name>
git flow config
git flow log
git push origin master:foo  # push local master to origin/foo
git push origin <local-branch>:<remote-branch>
git fetch && git log --remotes
git push origin master:foo  # push local master to origin/foo
git push <remote> <local branch>:<remote branch>
git tag -a|--annotate <tagname> 
git tag -a|--annotate <tagname> -m <message>
git show <tag>	# show tag annotation, commit info and diffs
git show --format=fuller
git show --shortstat	# no diff, just one commit log
git diff master HEAD -- <file>	# suppose current branch is not master
git push --tags
git push origin foo # suppose foo doesn't exist remotely, then this command creates foo on remote repository
git stash show
git blame --show-email --show-name --show-number --show-stats <file>
